#!/usr/bin/pypy

import sys
import os
import re

try:
	from simplejson import json
except ImportError:
	import json

from twisted.python.filepath import FilePath


def showError(gui, msg):
	if gui:
		import Tkinter
		import tkMessageBox

		root = Tkinter.Tk()
		root.withdraw()

		tkMessageBox.showerror("QuickDired error", msg)
	else:
		print >>sys.stderr, "Error: " + msg


UNC_PREFIX = u"\\\\?\\"

def absPathToUncPath(p):
	r"""
	See http://msdn.microsoft.com/en-us/library/aa365247%28v=vs.85%29.aspx#maxpath
	"""
	return UNC_PREFIX + p


def upgradeFilepath(f):
	r"""
	@param f: a L{FilePath} to upgrade.
	@return: a possibly-upgraded L{FilePath}.
	"""
	if os.name == 'nt' and not f.path.startswith(UNC_PREFIX):
		return FilePath(absPathToUncPath(f.path))
	return f


def tryInt(s):
	try:
		return int(s)
	except:
		return s


def filenameKey(s):
	return tuple(tryInt(c) for c in re.split('([0-9]+)', s))


def sortNicely(l):
	return sorted(l, key=filenameKey)


def maybeEncodeFilename(s):
	if os.name == 'nt':
		assert isinstance(s, unicode), s
		return s.encode("utf-8")
	assert isinstance(s, str), s
	return s


def maybeDecode(s):
	assert isinstance(s, str), s
	if os.name == 'nt':
		return s.decode("utf-8")
	return s


def maybeEncodeUni(s):
	assert isinstance(s, unicode), s
	if os.name == 'nt':
		return s
	return s.encode("utf-8")


def getNamesFromContent(s):
	return list(maybeDecode(fname) for fname in s.rstrip("\n").split("\n"))


def shouldInclude(name):
	return name not in set([
		maybeEncodeUni(u".quickdired.oldnames"),
		maybeEncodeUni(u".quickdired.newnames"),
		maybeEncodeUni(u".quickdired.options"),
	])


def withoutBase(root, fp):
	return fp.path.replace(root.path + (u"\\" if os.name == 'nt' else "/"), "", 1)


def getListing(root, deep):
	if not deep:
		return sortNicely(filter(shouldInclude, os.listdir(root.path)))
	else:
		return sortNicely(map(
			lambda fp: withoutBase(root, fp),
			filter(
				# --deep does not support renaming directories
				lambda fp: not fp.isdir() and shouldInclude(fp.basename()),
				root.walk()
			)))


def tryMakedirs(f):
	try:
		os.makedirs(f)
	except OSError:
		pass


def writeListingOrRename(deep, gui): # Note: deep may be changed below
	f = upgradeFilepath(FilePath(os.getcwdu() if os.name == 'nt' else os.getcwd()))

	oldNamesFile = f.child(maybeEncodeUni(u".quickdired.oldnames"))
	newNamesFile = f.child(maybeEncodeUni(u".quickdired.newnames"))
	optionsFile = f.child(maybeEncodeUni(u".quickdired.options"))

	if oldNamesFile.isfile() and newNamesFile.isfile() and optionsFile.isfile():
		# If all files exist, rename the files in current dir
		oldNames = getNamesFromContent(oldNamesFile.getContent())
		newNames = getNamesFromContent(newNamesFile.getContent())
		options = json.loads(optionsFile.getContent())
		if options['deep']:
			# Even if no --deep, assume deep if .options says deep: true
			deep = True

		listingNames = getListing(f, deep)

		if set(oldNames) != set(listingNames):
			print "old names = ", oldNames
			print "cur names = ", listingNames
			showError(gui, "Files in directory do not match .oldnames")
			return
		if len(oldNames) != len(newNames):
			showError(gui, ".newnames lists %r names while "
				".oldnames lists %r names" % (len(newNames), len(oldNames)))
			return

		for i, oldName in enumerate(oldNames):
			newName = newNames[i]
			if '/' in newName:
				tryMakedirs(newName.rsplit('/', 1)[0])
			os.rename(oldName, newName)
		
		optionsFile.remove()
		oldNamesFile.remove()
		newNamesFile.remove()
		if not gui:
			print "Done renaming."
	else:
		listingNames = getListing(f, deep)

		# Create the .oldnames and .newnames files, which the
		# user should edit, and then re-run quickdired.
		oldNamesFile.setContent("\n".join(map(maybeEncodeFilename, listingNames)) + "\n")
		newNamesFile.setContent("\n".join(map(maybeEncodeFilename, listingNames)) + "\n")
		optionsFile.setContent(json.dumps({"deep": deep}, indent=2))

		if gui:
			# Associate .newnames with whatever text editor you want
			os.startfile(maybeEncodeUni(u".quickdired.newnames"))
		else:
			print "Filenames recorded; edit .quickdired.newnames and run again to rename."


def main():
	deep = '--deep' in sys.argv[1:]
	gui = '--gui' in sys.argv[1:]
	writeListingOrRename(deep, gui)


if __name__ == '__main__':
	main()
