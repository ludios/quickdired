#!/usr/bin/env python3

import sys
import os
import re
import json

from pathlib import Path


def try_int(s):
	try:
		return int(s)
	except:
		return s


def filename_key(path):
	return tuple(try_int(c) for c in re.split("([0-9]+)", str(path)))


def sorted_nicely(paths):
	return sorted(paths, key=filename_key)


def get_names_from_content(s):
	return list(fname for fname in s.rstrip("\n").split("\n"))


def should_include(path):
	return path.name not in set([
		".quickdired.oldnames",
		".quickdired.newnames",
		".quickdired.options",
	])


def without_base(root, fp):
	return str(fp).replace(str(root) + "/", "", 1)


def get_listing(root, deep):
	if not deep:
		paths = sorted_nicely(filter(should_include, root.iterdir()))
	else:
		paths = sorted_nicely(map(
			lambda fp: without_base(root, fp),
			filter(
				# --deep does not support renaming directories
				lambda fp: not fp.is_dir() and should_include(fp),
				root.rglob("*")
			)))

	return list(map(lambda path: str(path), paths))


def write_listing_or_rename(deep):
	f = Path(os.getcwd())

	old_names_file = f.joinpath(".quickdired.oldnames")
	new_names_file = f.joinpath(".quickdired.newnames")
	options_file   = f.joinpath(".quickdired.options")

	if old_names_file.is_file() and new_names_file.is_file() and options_file.is_file():
		# If all files exist, rename the files in current dir
		old_names = get_names_from_content(old_names_file.read_text())
		new_names = get_names_from_content(new_names_file.read_text())
		options   = json.loads(options_file.read_text())
		if options["deep"]:
			# Even if no --deep, assume deep if .options says deep: true
			deep = True

		listing_names = get_listing(f, deep)

		if set(old_names) != set(listing_names):
			print("old names = ", old_names)
			print("cur names = ", listing_names)
			print("Files in directory do not match .oldnames", file=sys.stderr)
			return
		if len(old_names) != len(new_names):
			print(f".newnames lists {len(new_names)} names while .oldnames lists {len(old_names)} names", file=sys.stderr)
			return
		if len(new_names) != len(set(new_names)):
			print(".newnames has at least one non-unique name", file=sys.stderr)
			return

		for i, old_name in enumerate(old_names):
			new_name = new_names[i]
			if new_name != old_name:
				if "/" in new_name:
					os.makedirs(new_name.rsplit("/", 1)[0], exist_ok=True)
				os.rename(old_name, new_name)

		options_file.unlink()
		old_names_file.unlink()
		new_names_file.unlink()
		print("Done renaming.")
	else:
		listing_names = get_listing(f, deep)

		# Create the .oldnames and .newnames files, which the
		# user should edit, and then re-run quickdired.
		old_names_file.write_text("\n".join(listing_names) + "\n")
		new_names_file.write_text("\n".join(listing_names) + "\n")
		options_file.write_text(json.dumps({"deep": deep}, indent=2))
		print("Filenames recorded; edit .quickdired.newnames and run again to rename.")


def main():
	deep = "--deep" in sys.argv[1:]
	write_listing_or_rename(deep)


if __name__ == "__main__":
	main()
